#include<iostream>
using namespace std;
//一个对象或者变量没有初始状态，对其使用后果是未知的。同样，使用完一个对象或变量要及时清理，防止造成安全问题
//构造函数：在创建对象时为对象的成员属性赋值，构造函数有编译器自动调用，无需手动调用
//析构函数：在对象销毁前系统自动调用，执行清理工作
/*构造函数语法：类名（）{}
1.没有返回值，也不写void
2.函数名称与类名相同
3.构造函数可以有参数，因此可以重载
4.程序在调用对象时会自动调用构造，无需手动调用，而且只会调用一次
*/
/*析构函数语法：~类名（）{}
* 1.没有返回值，也不写void
* 2.函数名称与类名相同，在名称前加~
* 3.析构函数不可以有参数，因此不可以发生重载
* 4.程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次
*/

//对象的初始化和清理
class Person
{
public:
	//1.构造函数 进行初始化操作
	//没有返回值，不用写void
	//函数名与类名相同
	//构造函数可以有参数，可以重载
	//创建对象时，构造函数会自动调用，而且只会调用一次
	Person()
	{
		cout << "Person的构造函数的调用" << endl;
	}
	/*如果不写构造函数，编译器会自动写一个空实现的构造函数
    即Person（）
	 {
	 }*/
	//2.析构函数 进行清理操作
	//没有返回值 不写void
	//函数名和类名相同，在名称前加~
	//析构函数不可以有参数，不会重载
	//对象在销毁前会自动调用函数，而且只会调用一次
	~Person()
	{
		cout << "Person的析构函数的调用" << endl;
	}
};
//构造和析构都是必须有的实现，如果我们自己不写，编译器会提供一个空实现的构造和析构
void test01()
{
	Person p;//这里是创建对象，在栈上，test01（）执行完毕后就会释放这个对象
}


int main()
{
	test01();//调用对象的时候会自动调用构造函数
	
	system("pause");
	return 0;
}